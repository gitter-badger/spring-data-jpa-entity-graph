{
  "name": "Spring Data JPA EntityGraph",
  "tagline": "Spring Data JPA extension allowing full dynamic usage of JPA EntityGraph on repositories",
  "body": "# Spring Data JPA EntityGraph\r\n\r\nToday, [Spring Data JPA](https://github.com/spring-projects/spring-data-jpa) supports EntityGraph exlusively through annotations.  \r\nThus, for a method, the choice of EntityGraph must be made before compilation.  \r\n\r\nThis extension gives the ability to pass EntityGraph on any Spring Data JPA repository method as an argument, making the EntityGraph choice fully dynamic.\r\n\r\nExample:\r\n```java\r\nproductRepository.findByName(\"foo\", EntityGraphUtils.fromName(\"Product.brand\"));\r\n```\r\n\r\n## Compatibility\r\n\r\nThis library follows the Spring Data JPA versionning semantic.\r\n\r\nspring-data-jpa-entity-graph | spring-data-jpa\r\n---------------------------- | ---------------\r\n1.11.x | 1.11.y\r\n1.10.x | 1.10.y\r\n\r\n## Quick start\r\n\r\n1. In addition to spring-data-jpa, add the library dependency :\r\n    \r\n    ```xml\r\n    <dependency>\r\n        <groupId>com.cosium.spring.data</groupId>\r\n        <artifactId>spring-data-jpa-entity-graph</artifactId>\r\n        <version>1.10.14</version>\r\n    </dependency>\r\n    ```\r\n2. In your Spring configuration, set the repository factory bean class to `JpaEntityGraphRepositoryFactoryBean` :\r\n    \r\n    ```java\r\n    @Configuration\r\n    @EnableJpaRepositories(repositoryFactoryBeanClass = JpaEntityGraphRepositoryFactoryBean.class)\r\n    public class DataRepositoryConfiguration {\r\n        ...\r\n    }\r\n    ```\r\n3. Make sure your repositories extend `JpaEntityGraphRepository`, `JpaEntityGraphSpecificationExecutor` and/or `JpaEntityGraphQueryDslPredicateExecutor`\r\n\r\n##Â Basic Usage\r\n\r\nLet's consider the following entities and repository :\r\n```java\r\n@Entity\r\npublic class Brand {\r\n    @Id\r\n    private long id = 0;\r\n    private String name;\r\n    //...\r\n}\r\n```\r\n```java\r\n@NamedEntityGraphs(value = {\r\n    @NamedEntityGraph(name = \"Product.brand\", attributeNodes = {\r\n        @NamedAttributeNode(\"brand\")\r\n    })\r\n})\r\n@Entity\r\npublic class Product {\r\n    @Id\r\n    private long id = 0;\r\n    private String name;\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    private Brand brand;\r\n    //...\r\n}\t\r\n```\r\n```java\r\npublic interface ProductRepository extends JpaEntityGraphRepository<Product, Long> {\r\n    List<Product> findByName(String name, EntityGraph entityGraph);\r\n}\r\n```\r\n\r\nYou can pass the entity graph to the `findByName` method :\r\n```java\r\n// This will apply 'Product.brand' named EntityGraph to findByName\r\nproductRepository.findByName(\"MyProduct\", EntityGraphUtils.fromName(\"Product.brand\"));\r\n```\r\n\r\nOr to the `findOne` method :\r\n```java\r\n// This will apply 'Product.brand' named EntityGraph to findOne\r\nproductRepository.findOne(1L, EntityGraphUtils.fromName(\"Product.brand\"));\r\n```\r\n\r\nOr any method you like.\r\n\r\nYou can also pass a dynamically built EntityGraph by using `DynamicEntityGraph` implementation.\r\n\r\n## Default EntityGraph\r\n\r\nFor an Entity, you can define its default EntityGraph.  \r\nAn Entity default EntityGraph will be used each time the Entity repository method is called without EntityGraph.  \r\n\r\nA default EntityGraph name must end with `.default`. \r\n\r\n```java\r\n@NamedEntityGraphs(value = {\r\n    @NamedEntityGraph(name = \"Product.default\", attributeNodes = {\r\n        @NamedAttributeNode(\"brand\")\r\n    })\r\n})\r\n@Entity\r\npublic class Product {\r\n    @Id\r\n    private long id = 0;\r\n    private String name;\r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    private Brand brand;\r\n    //...\r\n}\t\r\n```\r\n```java\r\n// This call will make use of \"Product.default\" EntityGraph.\r\nproductRepository.findOne(1L);\r\n```\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}